plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

archivesBaseName = "${rootProject.archives_base_name}-${version}-fabric-mc"

dependencies {
    // Libraries
    implementation("com.github.FiguraMC.LuaJ:luaj-core:$luaj-figura")
    implementation("com.github.FiguraMC.LuaJ:luaj-jse:$luaj-figura")
    implementation("com.neovisionaries:nv-websocket-client:$nv_websocket")

    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Fabric API
    //modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_api"
    modImplementation ("net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${rootProject.fabric_api}")

    // Mods
    if (rootProject.run_with_modmenu == "true") {
     //   modImplementation("maven.modrinth:modmenu:$modmenu")
    } else {
      //  modCompileOnly("maven.modrinth:modmenu:$modmenu")
    }
    if (rootProject.run_with_geckolib == "true") {
   //     modImplementation("software.bernie.geckolib:geckolib-fabric-$geckolib_version_fabric")
    } else {
   //     modCompileOnly ("software.bernie.geckolib:geckolib-fabric-$geckolib_version_fabric") {
   //         exclude group: "net.fabricmc"
   //     }
    }

    implementation(project(":common"))
}

// Fixes issues if multiple fabric loader version are present from dependencies
configurations.all {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$fabric_loader_version")
    }
}


unimined.minecraft {
    legacyFabric {
        loader fabric_loader_version
    }
}


processResources {
    Map<String, Object> properties = new HashMap<>()

    properties.put("version", project.jarVersion)
    properties.put("java_version", rootProject.java_version)
    properties.put("minecraft_version", rootProject.minecraft_version)
    properties.put("assets_version", rootProject.assets_version)

    properties.forEach((k, v) -> inputs.property(k, v.toString()))
    filesMatching("fabric.mod.json") {
        expand properties
    }
}

compileTestJava.enabled = false

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { String.valueOf("$archives_base_name").toUpperCase() + "_${it}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${project.archivesBaseName}-${project.name}"
            version = project.version
            from components.java
        }
    }
    setupRepositories(repositories)
}

void setupRepositories(RepositoryHandler repositories) {
    if (project.hasProperty("mavenUrl")) {
        repositories.maven {
            name = "figuraMaven"
            url project.mavenUrl
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
